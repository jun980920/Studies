#Memoization
def max_profit_memo(price_list, count, cache):
    if count in cache.keys():
        return cache[count]
    else:
        half=count//2
        if len(price_list)>count:
            max=price_list[count]
        else:
            max = max_profit_memo(price_list, 1, cache) + max_profit_memo(price_list, count - 1, cache)
        for i in range(1, half+1):
            Combination=max_profit_memo(price_list, i, cache)+max_profit_memo(price_list, count-i, cache)
            if Combination>max:
                max=Combination
    cache[count]=max
    return cache[count]

def max_profit(price_list, count):
    max_profit_cache = {}
    max_profit_cache[0]=price_list[0]
    max_profit_cache[1]=price_list[1]
    return max_profit_memo(price_list, count, max_profit_cache)


# 테스트
print(max_profit([0, 100, 400, 800, 900, 1000], 5))
print(max_profit([0, 100, 400, 800, 900, 1000], 10))
print(max_profit([0, 100, 400, 800, 900, 1000, 1400, 1600, 2100, 2200], 9))
